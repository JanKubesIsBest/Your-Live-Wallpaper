//
//  DatabaseManager.swift
//  Your Ai Wallpaper
//
//  Created by Jan KubeÅ¡ on 08.06.2025.
//

import SwiftData

class DatabaseManager {
    private let modelContext: ModelContext

    // Initialize with the context from the view
    init(modelContext: ModelContext) {
        self.modelContext = modelContext
    }

    @MainActor
    func save(wallpaper: SavedWallpaper) {
        // Your saving logic here, using self.modelContext
        self.modelContext.insert(wallpaper)
        try? self.modelContext.save()
    }
    
    /// This function returns only wallpapers which were generated by user.
    @MainActor
    func fetchCachedFirebaseWallpapers() -> [SavedWallpaperNotManagedByModel] {
        let fetchDescriptor = FetchDescriptor<SavedWallpaper>(sortBy: [SortDescriptor(\.dateAdded, order: .reverse)])
        do {
            let fetchedWallpapers = try modelContext.fetch(fetchDescriptor)
            var result: [SavedWallpaperNotManagedByModel] = []
            
            for wallpaper in fetchedWallpapers {
                if wallpaper.isFirebaseSource == true {
                    result.append(wallpaper.getSavedWallpaperNotManagedByDatabase())
                }
            }
            
            return result
        } catch {
            print("Error fetching wallpapers: \(error)")
            return []
        }
    }
    
    /// This function returns only wallpapers which were generated by user.
    @MainActor
    func fetchRecentWallpapers() -> [SavedWallpaperNotManagedByModel] {
        let fetchDescriptor = FetchDescriptor<SavedWallpaper>(sortBy: [SortDescriptor(\.dateAdded, order: .reverse)])
        
        do {
            do {
                let fetchedWallpapers = try modelContext.fetch(fetchDescriptor)
                var result: [SavedWallpaperNotManagedByModel] = []
                
                for wallpaper in fetchedWallpapers {
                    if (wallpaper.isFirebaseSource == false) {
                        result.append(wallpaper.getSavedWallpaperNotManagedByDatabase())
                    }
                }
                
                return result
            } catch {
                print("Error fetching wallpapers: \(error)")
                return []
            }
        }
    }
}
